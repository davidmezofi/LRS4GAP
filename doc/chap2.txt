  
  [1X2 [33X[0;0YUsage[133X[101X
  
  
  [1X2.1 [33X[0;0YFormulating the Linear Programming problems[133X[101X
  
  [33X[0;0YLet  [22XA[122X be a rational matrix with [22Xn[122X rows and [22Xm[122X columns, [22Xrhs[122X a (column) vector
  of dimension [22Xn[122X and [22Xobj[122X is a (row) vector of dimension [22Xm[122X.[133X
  
  [33X[0;0YWe consider the Linear Programming problem[133X
  
  [33X[0;0Y[13Xmaximize/minimize[113X [22Xobjâ‹…x[122X, [13Xsubject to[113X [22XAx â‰¥ rhs[122X.[133X
  
  
  [1X2.2 [33X[0;0Y[5XLRS4GAP[105X[101X[1X functions[133X[101X
  
  [1X2.2-1 LRS_LPSolveMax[101X
  
  [29X[2XLRS_LPSolveMax[102X( [3XA[103X, [3Xrhs[103X, [3Xobj[103X ) [32X function
  [29X[2XLRS_LPSolveMin[102X( [3XA[103X, [3Xrhs[103X, [3Xobj[103X ) [32X function
  
  [33X[0;0YIf the problem has a solution then the function returns the pair [10X[ x, val ][110X,
  where  [22Xx[122X  is the vector of dimension [22Xm[122X which realizes the optimum value [22Xval[122X.
  If  the  problem  is not feasible or not bounded then the function returns [10X[
  fail,  "No  feasible  solution"  ][110X or [10X[ fail, "Unbounded solution" ][110X and the
  respective info warning will be given.[133X
  
  [1X2.2-2 LRS_Export2FreeMPS[101X
  
  [29X[2XLRS_Export2FreeMPS[102X( [3XA[103X, [3Xrhs[103X, [3Xobj[103X, [3Xfilename[103X ) [32X function
  
  [33X[0;0YThis   function   exports   the   LP   problem   to   the  free  MPS  format
  ([7Xhttps://en.wikipedia.org/wiki/MPS_(format)[107X). This format is used by several
  more  sophisticated  LP  solvers, for example the GNU Linear Programming Kit
  ([7Xhttp://www.gnu.org/software/glpk/[107X)     [11XGLPK[111X.    See    the    documentation
  glpk-refman.pdf
  ([7Xhttps://www.math.ucdavis.edu/~mkoeppe/lehre/opt1-2003/glpk-refman.pdf[107X)  for
  detailed  description  of this format. Moreover, [11XGLPK[111X can be used to convert
  to problem data in several other formats.[133X
  
  [1X2.2-3 LRS_MaxWeightMatching[101X
  
  [29X[2XLRS_MaxWeightMatching[102X( [3Xm[103X ) [32X function
  [29X[2XLRS_MinWeightMatching[102X( [3Xm[103X ) [32X function
  
  [33X[0;0YLet  [3Xm[103X  be  a  square  matrix  over the rationals. These commands return the
  solution  of  the  assigment  problem of maximizing/minimizing the objective
  function [22Xâˆ‘_i,j X_i,j m_i,j[122X with [22X0â‰¤ X_i,jâ‰¤ 1[122X.[133X
  
  
  [1X2.3 [33X[0;0YExamples[133X[101X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA := [ [ 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2 ], [ -1, -1, 0, -1, -2, -1, -1, -1, 0, -1, -1, 0 ],[127X[104X
    [4X[25X>[125X [27X	[ 5, 0, 0, 3, -1, -1, 1, 1, 1, -3, 0, -2 ], [ 5, 0, 0, 3, -1, -1, 1, 1, 1, -3, 0, -2 ],[127X[104X
    [4X[25X>[125X [27X	[ -9, 1, -1, 0, 0, 0, 3, 0, 0, -1, -1, 2 ], [ -9, 1, -1, 0, 0, 0, 3, 0, 0, -1, -1, 2 ],[127X[104X
    [4X[25X>[125X [27X	[ 12, 2, -2, 0, 0, 0, 0, 0, 0, 4, 1, -2 ], [ -11, -1, 0, 1, 2, 1, 1, 1, -2, -3, 0, 0 ],[127X[104X
    [4X[25X>[125X [27X	[ 3, -2, 2, 0, 0, 0, 3, 0, 0, 3, 0, 0 ], [ 10, 0, 0, -7, 0, 1, -2, 1, 0, 2, -1, -1 ],[127X[104X
    [4X[25X>[125X [27X	[ 10, 0, 0, -7, 0, 1, -2, 1, 0, 2, -1, -1 ], [ -10, 0, 0, 3, -1, -1, -2, 1, -1, 6, 0, 2 ],[127X[104X
    [4X[25X>[125X [27X	[ -10, 0, 0, 3, -1, -1, -2, 1, -1, 6, 0, 2 ], [ 35, 0, 0, 6, -2, 2, 3, 0, -2, 3, 0, 0 ],[127X[104X
    [4X[25X>[125X [27X	[ -5, 0, 0, -3, 1, 1, -1, -1, 0, 3, 0, 0 ], [ -5, 0, 0, -3, 1, 1, -1, -1, 0, 3, 0, 0 ],[127X[104X
    [4X[25X>[125X [27X	[ -15, 0, 0, 8, 2, 0, -3, 0, 0, -7, -1, 0 ], [ 11, 1, 2, 7, 0, -1, -1, -1, 0, 3, 0, 0 ],[127X[104X
    [4X[25X>[125X [27X	[ 24, -1, -2, 8, 2, 0, 0, 0, 2, 8, -1, 0 ], [ -19, 1, 0, 6, -2, 2, -3, 0, 0, -3, 0, 0 ],[127X[104X
    [4X[25X>[125X [27X	[ 16, 1, 0, -6, 2, -2, 0, 0, -2, 0, 0, 0 ], [ 0, 0, 0, -8, -2, 0, 0, 0, 2, 0, 0, 2 ],[127X[104X
    [4X[25X>[125X [27X	[ 9, -1, 0, 0, 0, 0, -3, 0, 0, 1, 1, 0 ], [ 24, -1, -2, 0, 0, 0, 0, 0, 0, -8, 1, 2 ],[127X[104X
    [4X[25X>[125X [27X	[ 36, 1, 2, 0, 0, 0, 0, 0, 0, -4, -1, 0 ], [ -45, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, -2 ] ];;[127X[104X
    [4X[25Xgap>[125X [27Xrhs := [ -1, -23, -45, -45, -231, -231, -252, -253, -483, -770, -770, -990, -990, -1035, -1035,[127X[104X
    [4X[25X>[125X [27X  -1035, -1265, -1771, -2024, -2277, -3312, -3520, -5313, -5544, -5796, -10395 ];;[127X[104X
    [4X[25Xgap>[125X [27Xobj := [ 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2 ];;[127X[104X
    [4X[25Xgap>[125X [27XLRS_LPSolveMax(A,rhs,obj);[127X[104X
    [4X[28X[ [ 4163/16, -2967/4, -2967/4, 37007/112, 20217/14, 24403/16, -14053/16, 15847/4, 9177/4, 3657/8, -31119/4, -2577/2 ], 551 ][128X[104X
  [4X[32X[104X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xma:=RandomMat(5,5);  [127X[104X
    [4X[28X[ [ 0, 2, 1, 0, -1 ], [ 2, -1, 2, 3, 4 ], [ -1, 0, -4, 2, 2 ], [ 0, 3, 2, 3, -4 ], [ 5, 0, 0, 1, -1 ] ][128X[104X
    [4X[25Xgap>[125X [27XLRS_MinWeightMatching(ma);[127X[104X
    [4X[28X[ [ [ 1, 0, 0, 0, 0 ], [ 0, 1, 0, 0, 0 ], [ 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 0 ] ], -8 ][128X[104X
  [4X[32X[104X
  
